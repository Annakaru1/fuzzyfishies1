class MyQueue
  def initialize
    @queue = []
  end

  def enqueue(item)
    @queue.push(item)
  end

  def dequeue
    @queue.shift
  end
end

class Tree
  attr_accessor :payload, :children

  def initialize(payload, children)
    @payload = payload
    @children = children
  end

  def search(value, node)
    queue = MyQueue.new
    queue.enqueue(node)

    while current_node = queue.dequeue
      print "#{current_node.payload} --> "
      if (value == current_node.payload) 
        puts "found it"
        exit
      else 
        current_node.children.each do |child|
          queue.enqueue(child)
        end    
      end     
    end
  end
end

# The "Leafs" of a tree, elements that have no children
deep_fifth_node = Tree.new(5, [])
eleventh_node = Tree.new(11, [])
fourth_node   = Tree.new(4, [])

# The "Branches" of the tree
ninth_node = Tree.new(9, [fourth_node])
sixth_node = Tree.new(6, [deep_fifth_node, eleventh_node])
seventh_node = Tree.new(7, [sixth_node])
shallow_fifth_node = Tree.new(5, [ninth_node])

# The "Trunk" of the tree
trunk   = Tree.new(2, [seventh_node, shallow_fifth_node])

#-------------------------
puts "enter search value"
search_value = gets.chomp.to_i

trunk.search(search_value, trunk)
